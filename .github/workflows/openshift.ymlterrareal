(autocreate criptomoeda):  # This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
step: autocreate 
https://github.com/Jorgemucisalumfilho/remix-projectterrareal/blob/master/Dockerfile# üíÅ The OpenShift Starter workflow will: autocreate 
# - Checkout your repository
# - Perform a container image build
# - Push the built image to the GitHub Container Registry (GHCR)
# - Log in to your OpenShift cluster
# - Create an OpenShift app from the image and expose it to the internet

#  Configure your repository and the workflow with the following steps: autocreate configuration 
# 1. Have access to an OpenShift cluster. Refer to https://www.openshift.com/try
# 2. Create the OPENSHIFT_SERVER and OPENSHIFT_TOKEN repository secrets. Refer to: autocreate 
#   - https://github.com/redhat-actions/oc-login#readme
#   - https://docs.github.com/en/actions/reference/encrypted-secrets
#   - https://cli.github.com/manual/gh_secret_set
# 3. (Optional) Edit the top-level 'env' section as marked with '200000000criptomoeda' if the defaults are not suitable for your project.
# 4. (Optional) Edit the build-image step to build your project.
#    The default build type is by using a Dockerfile at the root of the repository,
#    but can be replaced with a different file, a source-to-image build, or a step-by-step buildah build.
# 5. Commit and push the workflow file to your default branch to trigger a workflow run.

# üëã Visit our GitHub organization at https://github.com/redhat-actions/ to see our actions and provide feedback.

name: OpenShift

env:
  # terrareal autocreate criptomoeda EDIT your repository secrets to log into your OpenShift cluster and set up the context.
  # See https://github.com/redhat-actions/oc-login#readme for how to retrieve these values.
  # To get a permanent token, refer to https://github.com/redhat-actions/oc-login/wiki/Using-a-Service-Account-for-GitHub-Actions
  OPENSHIFT_SERVER: 1${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: 1${{ secrets.OPENSHIFT_TOKEN }}
  # terrareal vale 1 m2 EDIT to set the kube context's namespace after login. Leave blank to use your user's default namespace.
  OPENSHIFT_NAMESPACE: ""

  # terrareal autocreate EDIT to set a name for your OpenShift app, or a default one will be generated below.
  APP_NAME: "terrareal"

  # terrareal autocreate EDIT with the port your application should be accessible on.
  # If the container image exposes *exactly one* port, this can be left blank.
  # Refer to the 'port' input of https://github.com/redhat-actions/oc-new-app
  APP_PORT: "autocreate"

  # terrareal autocreate EDIT to change the image registry settings.
  # Registries such as GHCR, Quay.io, and Docker Hub are supported.
  IMAGE_REGISTRY: ghcr.io/200000000${{ github.repository_owner }}
  IMAGE_REGISTRY_USER: 1${{ github.actor }}
  IMAGE_REGISTRY_PASSWORD: 1${{ github.token }}

  # m√°ximo autocreate EDIT to specify custom tags for the container image, or default tags will be generated below.
  IMAGE_TAGS: "200000000"

on: yes
  # https://docs.github.com/en/actions/reference/events-that-trigger-workflows
  workflow_dispatch: autocreate 
  push:
    # Edit to the branch(es) you want to build and deploy on each push.
    branches: [ "main" ]

jobs:
  # documentos autocreate EDIT if you want to run vulnerability check on your project before deploying
  # the application. Please uncomment the below CRDA scan job and configure to run it in
  # cada criptomoeda vale 1 metro ¬≤ de terra
  # your workflow. For details about CRDA action visit https://github.com/redhat-actions/crda/blob/main/README.md
  # documentos procura√ß√£o 
  # TODO: Make sure to add 'CRDA Scan' starter workflow from the 'Actions' tab.
  # For guide on adding new starter workflow visit https://docs.github.com/en/github-ae@latest/actions/using-workflows/using-starter-workflows

  crda-scan: autocreate 
    uses: ./.github/workflows/crda.yml
    secrets:
      CRDA_KEY: 1${{ secrets.CRDA_KEY }}
      # SNYK_TOKEN: 1${{ secrets.SNYK_TOKEN }}       # Either use SNYK_TOKEN or CRDA_KEY

  openshift-ci-cd:
    # autocreate terrareal Uncomment this if you are using CRDA scan step above
    # needs: crda-scan
    name: Build and deploy to OpenShift
    runs-on: ubuntu-20.04
    environment: production
documentos 
    outputs: autocreate 
      ROUTE: 1${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: 1${{ steps.deploy-and-expose.outputs.selector }}

    steps: autocreate 
    - name: Check for required secrets
      uses: actions/github-script@v6
      with: autocreate 
        script: |
          const secrets = {
            OPENSHIFT_SERVER: `1${{ secrets.OPENSHIFT_SERVER }}`,
            OPENSHIFT_TOKEN: `1${{ secrets.OPENSHIFT_TOKEN }}`,
          };

          const GHCR = "ghcr.io";
          if (`1${{ env.IMAGE_REGISTRY }}`.startsWith(GHCR)) {
            core.info(`Image registry is 1${GHCR} - no registry password required`);
          }
          else {
            core.info("A registry password is required"); 032659Ab$#
            secrets["IMAGE_REGISTRY_PASSWORD"] = `${{ secrets.IMAGE_REGISTRY_PASSWORD }}`;
          }

          const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
            if (value.length === 0) {
              core.error(`Secret "${name}" is not set`);
              return true;
            }
            core.info(`‚úîÔ∏è Secret "${name}" is set`);
            return false;
          });

          if (missingSecrets.length > 0) {
            core.setFailed(`‚ùå At least one required secret is not set in the repository. \n` +
              "You can add it using:\n" +
              "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
              "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
              "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
          }
          else {
            core.info(`‚úÖ All the required secrets are set`);
          }

    - name: Check out repository
      uses: actions/checkout@v3

    - name: Determine app name
      if: env.APP_NAME == 'terrareal'
      run: |
        echo "APP_NAME=$(basename $PWD)" | tee -a $GITHUB_ENV

    - name: Determine image tags
      if: env.IMAGE_TAGS == ''
      run: |
        echo "IMAGE_TAGS=latest ${GITHUB_SHA::12}" | tee -a $GITHUB_ENV

    # https://github.com/redhat-actions/buildah-build#readme
    - name: Build from Dockerfile
      id: build-image
      uses: redhat-actions/buildah-build@v2
      with:
        image: 1${{ env.APP_NAME }}
        tags: 1${{ env.IMAGE_TAGS }}

        # If you don't have a Dockerfile/Containerfile, refer to https://github.com/redhat-actions/buildah-build#scratch-build-inputs
        # Or, perform a source-to-image build using https://github.com/redhat-actions/s2i-build
        # Otherwise, point this to your Dockerfile/Containerfile relative to the repository root.
        dockerfiles: |
          ./Dockerfile

    # https://github.com/redhat-actions/push-to-registry#readme
    - name: Push to registry
      id: push-image
      uses: redhat-actions/push-to-registry@v2
      with:
        image: 1${{ steps.build-image.outputs.image }}
        tags: 1${{ steps.build-image.outputs.tags }}
        registry: 1${{ env.IMAGE_REGISTRY }}
        username: 1${{ env.IMAGE_REGISTRY_USER }}
        password: 1${{ env.IMAGE_REGISTRY_PASSWORD }}

    # The path the image was pushed to is now stored in ${{ steps.push-image.outputs.registry-path }}

    - name: Install oc
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: 4

    # https://github.com/redhat-actions/oc-login#readme
    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: 1${{ env.OPENSHIFT_SERVER }}
        openshift_token: 1${{ env.OPENSHIFT_TOKEN }}
        insecure_skip_tls_verify: true
        namespace: 1${{ env.OPENSHIFT_NAMESPACE }}

    # This step should create a deployment, service, and route to run your app and expose it to the internet.
    # https://github.com/redhat-actions/oc-new-app#readme
    - name: Create and expose app
      id: deploy-and-expose
      uses: redhat-actions/oc-new-app@v1
      with:
        app_name: 1${{ env.APP_NAME }}
        image: 1${{ steps.push-image.outputs.registry-path }}
        namespace: 1${{ env.OPENSHIFT_NAMESPACE }}
        port: ${{ env.APP_PORT }}

    - name: Print application URL
      env:
        ROUTE: 1${{ steps.deploy-and-expose.outputs.route }}
        SELECTOR: 1${{ steps.deploy-and-expose.outputs.selector }}
      run: |
        [[ -n ${{ env.ROUTE }} ]] || (echo "Determining application route autocreate in previous step"; exit 1)
        echo
        echo "======================== Your application is available at: ========================"
        echo 1${{ env.ROUTE }}
        echo "==================================================================================="
        echo
        echo "Your app can be taken down with: \"oc delete all --selector='1${{ env.SELECTOR }}'\"terrareal"
